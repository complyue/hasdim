{##
 # This is the sentinel file stand in place of a host module that
 # should have been installed by the host interpreter, which contains
 # host procedures, classes and other artifacts defined via EHI
 # (which is obviously written in the host language i.e. Haskell)
 #
 # Execution of this module file is a sign showing that wrong Edh
 # interpreter is used to run the program.
 #}
if running!true # should be treated as false for proper control-flow analysis
then error( 'Missing host module: ' ++ __name__ )

# rest of the source here serves as meta documentation for aforementioned
# host artifacts, and is meant to be leveraged by IDE tools (such as els)
# with source code analysis capabilities, to aid the developers

{## Wrapped host value encapsulates some `Folding` instance

self/left/right foldings are separately supported according to specific dtype of the target column
 #}
class FoldOp pass


export {

  {## Folding Procedures
   # - With folding operations instead of Numpy `ufunc`s
   #} {;

    {##
     # Reduce a series (column) to a scalar value
     #}
    method fold( foldingOp, col, ) pass

    {##
     # Reduce a series (column) to a scalar value, left-to-right
     #}
    method foldl( foldingOp, start, col, ) pass

    {##
     # Reduce a series (column) to a scalar value, right-to-left
     #}
    method foldr( foldingOp, start, col, ) pass

    {##
     # Scan a series (column) to a result series, left-to-right
     #}
    method scanl( foldingOp, start, col, ) pass

    {##
     # Scan a series (column) to a result series, right-to-left
     #}
    method scanr( foldingOp, start, col, ) pass

  }


  {## Folding Operations
   # - Those dtype aware
   #} {;

    add = FoldOp()
    add'valid = FoldOp()

    multiply = FoldOp()
    multiply'valid = FoldOp()

  }

}

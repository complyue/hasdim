{##
 # This is the sentinel file stand in place of a host module that
 # should have been installed by the host interpreter, which contains
 # host procedures, classes and other artifacts defined via EHI
 # (which is obviously written in the host language i.e. Haskell)
 #
 # Execution of this module file is a sign showing that wrong Edh
 # interpreter is used to run the program.
 #}
if running!true # should be treated as false for proper control-flow analysis
then error( 'Missing host module: ' ++ __name__ )

# rest of the source here serves as meta documentation for aforementioned
# host artifacts, and is meant to be leveraged by IDE tools (such as els)
# with source code analysis capabilities, to aid the developers

class HostOpWrapped pass

export {

  {## Higher Order Procedures
   # - Simplified `ufunc`s
   #} {;

    {##
     # Reduce a series (column) to a scalar value, with monoidal semantics
     #}
    method fold( col, identityVal, associativeOp, ) pass

    {##
     # Scan a series (column) to a result series, with monoidal semantics
     #}
    method scan( col, identityVal, associativeOp, ) pass

  }


  {## Wrapped Host Data Operations
   # - Element-wise host operations those sensible to dtype

The wrapped host function will take "data type identifier" as first argument, and evaluates to dtype specific signature expected by the corresponding `FlatOp` struct.

   #} {;

    add = HostOpWrapped()
    add'valid = HostOpWrapped()

    multiply = HostOpWrapped()
    multiply'valid = HostOpWrapped()

  }

}

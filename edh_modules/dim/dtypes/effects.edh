{##
 # This is the sentinel file stand in place of a host module that
 # should have been installed by the host interpreter, which contains
 # host procedures, classes and other artifacts defined via EHI
 # (which is obviously written in the host language i.e. Haskell)
 #
 # Execution of this module file is a sign showing that wrong Edh
 # interpreter is used to run the program.
 #}
if running!true # should be treated as false for proper control-flow analysis
then error( 'Missing host module: ' ++ __name__ )

# rest of the source here serves as meta documentation for aforementioned
# host artifacts, and is meant to be leveraged by IDE tools (such as els)
# with source code analysis capabilities, to aid the developers

class HostValue pass
hostValue = HostValue()

export {

  __DataComparator_float64__ = hostValue
  __DataComparator_float32__ = hostValue
  __DataComparator_int64__ = hostValue
  __DataComparator_int32__ = hostValue
  __DataComparator_int8__ = hostValue
  __DataComparator_byte__ = hostValue
  __DataComparator_intp__ = hostValue
  __DataComparator_yesno__ = hostValue
  __DataComparator_decimal__ = hostValue
  __DataComparator_box__ = hostValue

  __DataOperator_float64__ = hostValue
  __DataOperator_float32__ = hostValue
  __DataOperator_int64__ = hostValue
  __DataOperator_int32__ = hostValue
  __DataOperator_int8__ = hostValue
  __DataOperator_byte__ = hostValue
  __DataOperator_intp__ = hostValue
  __DataOperator_yesno__ = hostValue
  __DataOperator_decimal__ = hostValue
  __DataOperator_box__ = hostValue

  __NumDataType_float64__ = hostValue
  __NumDataType_float32__ = hostValue
  __NumDataType_int64__ = hostValue
  __NumDataType_int32__ = hostValue
  __NumDataType_int8__ = hostValue
  __NumDataType_byte__ = hostValue
  __NumDataType_intp__ = hostValue
  __NumDataType_decimal__ = hostValue
  __NumDataType_box__ = hostValue

  __FloatDataOperator_float64__ = hostValue
  __FloatDataOperator_float32__ = hostValue

}

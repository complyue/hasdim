{##
 # This is the sentinel file stand in place of a host module that
 # should have been installed by the host interpreter, which contains
 # host procedures, classes and other artifacts defined via EHI
 # (which is obviously written in the host language i.e. Haskell)
 #
 # Execution of this module file is a sign showing that wrong Edh
 # interpreter is used to run the program.
 #}
if running!true # should be treated as false for proper control-flow analysis
then error( 'Missing host module: ' ++ __name__ )

# rest of the source here serves as meta documentation for aforementioned
# host artifacts, and is meant to be leveraged by IDE tools (such as els)
# with source code analysis capabilities, to aid the developers

import * './dtypes'

export {

  arange :: (
    start!int!Decimal : stop!int!Decimal : step!int!Decimal,
    dtype!Object || None,
  ) -> Column
  arange :: (
    start!int!Decimal : stop!int!Decimal,
    dtype!Object || None,
  ) -> Column
  arange :: (
    stop!int!Decimal,
    dtype!Object || None,
  ) -> Column
  {##
   # Similar to Numpy's `arange()``, but the range needs to be specified with
   # pairs if not simply a positive integer for max value.
   #}
  method arange( rangeSpec, dtype as _ = intp ) pass

  {##
   # Create a random array with the specified size (both len and cap)

All elements will be in the specified range.

TODO both bounds of the range are always treated as closed bound for now
   #}
  method random( size, rangeSpec= 0..1, dtype as _ = float64 ) pass

  where :: ( bool'index!Column ) -> Column
  {##
   # Similar to Numpy's `where()`, but limited to bool index input as currently
   # implemented
   #
   # see: https://numpy.org/doc/stable/reference/generated/numpy.where.html
   #}
  method where( colBoolIdx ) pass

  pi :: ( capacity!int!Decimal, float!dtype!Object || None ) -> Column
  {##
   # Create a column object with the specified capacity and every element
   # filled with mathematic constant Ï€, per the specified dtype
   #}
  method pi( cap as _, dtype as _ = float64 ) pass

  exp :: ( float!Column ) -> float!Column
  {##
   # Vectorized [floating point `exp`](
        https://hackage.haskell.org/package/base/docs/Prelude.html#v:exp
     )
   #}
  method exp( colObj ) pass

  log :: ( float!Column ) -> float!Column
  {##
   # Vectorized [floating point `log`](
        https://hackage.haskell.org/package/base/docs/Prelude.html#v:log
     )
   #}
  method log( colObj ) pass

  sqrt :: ( float!Column ) -> float!Column
  {##
   # Vectorized [floating point `sqrt`](
        https://hackage.haskell.org/package/base/docs/Prelude.html#v:sqrt
     )
   #}
  method sqrt( colObj ) pass

  sin :: ( float!Column ) -> float!Column
  {##
   # Vectorized [floating point `sin`](
        https://hackage.haskell.org/package/base/docs/Prelude.html#v:sin
     )
   #}
  method sin( colObj ) pass

  cos :: ( float!Column ) -> float!Column
  {##
   # Vectorized [floating point `cos`](
        https://hackage.haskell.org/package/base/docs/Prelude.html#v:cos
     )
   #}
  method cos( colObj ) pass

  tan :: ( float!Column ) -> float!Column
  {##
   # Vectorized [floating point `tan`](
        https://hackage.haskell.org/package/base/docs/Prelude.html#v:tan
     )
   #}
  method tan( colObj ) pass

  asin :: ( float!Column ) -> float!Column
  {##
   # Vectorized [floating point `asin`](
        https://hackage.haskell.org/package/base/docs/Prelude.html#v:asin
     )
   #}
  method asin( colObj ) pass

  acos :: ( float!Column ) -> float!Column
  {##
   # Vectorized [floating point `acos`](
        https://hackage.haskell.org/package/base/docs/Prelude.html#v:acos
     )
   #}
  method acos( colObj ) pass

  atan :: ( float!Column ) -> float!Column
  {##
   # Vectorized [floating point `atan`](
        https://hackage.haskell.org/package/base/docs/Prelude.html#v:atan
     )
   #}
  method atan( colObj ) pass

  sinh :: ( float!Column ) -> float!Column
  {##
   # Vectorized [floating point `sinh`](
        https://hackage.haskell.org/package/base/docs/Prelude.html#v:sinh
     )
   #}
  method sinh( colObj ) pass

  cosh :: ( float!Column ) -> float!Column
  {##
   # Vectorized [floating point `cosh`](
        https://hackage.haskell.org/package/base/docs/Prelude.html#v:cosh
     )
   #}
  method cosh( colObj ) pass

  tanh :: ( float!Column ) -> float!Column
  {##
   # Vectorized [floating point `tanh`](
        https://hackage.haskell.org/package/base/docs/Prelude.html#v:tanh
     )
   #}
  method tanh( colObj ) pass

  asinh :: ( float!Column ) -> float!Column
  {##
   # Vectorized [floating point `asinh`](
        https://hackage.haskell.org/package/base/docs/Prelude.html#v:asinh
     )
   #}
  method asinh( colObj ) pass

  acosh :: ( float!Column ) -> float!Column
  {##
   # Vectorized [floating point `acosh`](
        https://hackage.haskell.org/package/base/docs/Prelude.html#v:acosh
     )
   #}
  method acosh( colObj ) pass

  atanh :: ( float!Column ) -> float!Column
  {##
   # Vectorized [floating point `atanh`](
        https://hackage.haskell.org/package/base/docs/Prelude.html#v:atanh
     )
   #}
  method atanh( colObj ) pass


  {##
   # A Column object is a 1d vector of specific data type (`dtype`), it has a
   # fixed capacity, and a dynamic valid data length.
   #
   # Its capacity can be observed via the builtin `cap` method, and growed by
   # the builtin `grow` method.
   #
   # Its valid data length can be observed via the builtin `len` method, and
   # changed by the builtin `mark` method.
   #
   # Otherwise it is similar to a Numpy `ndarray`, with various vectorized
   # operations to be performed against Column objects.
   #}
  class Column {

    {##
     # Construct a new Column object with specified capacity
     #
     # The valid data length defaults to the capacity if not specified
     #
     # The data type defaults to float64 if not specified
     #}
    method __init__(
      capacity: 'Decimal',
      length: 'Decimal' = capacity,
      dtype: dtype as _ = float64,
      *** # allow/ignore arbitrary ctor args for descendant classes
    ) pass

    # Respond to `cap()` by returning capacity of this column object
    method __cap__() pass
    # Respond to `grow()` by growing capacity of this column object
    method __grow__() pass
    # Respond to `len()` by returning valid data length of this column object
    method __len__() pass
    # Respond to `mark()` by updating valid data length of this column object
    method __mark__() pass

    # Respond to indexing against this column object
    method ([]) ( ix ) pass
    # Respond to indexed assignment to this column object
    method ([=]) ( ix, data_ ) pass

    # Make a copy of this column
    method copy() pass

    # Respond to `blob()` by returning the binary data from this column object
    method __blob__() pass

    # Respond to `repr()` by returning the string representation of this
    # column object
    method __repr__() pass

    # Responding to `show()` by returning a string with the summary of this
    # column object
    method __show__() pass

    # Responding to `desc()` by returning a string with the descriptive
    # statistics of this column object
    method __desc__() pass

    # Elementwise comparison to another column object, or vectorized comparison
    # to another scalar value
    method (==) ( other ) pass
    # Vectorized comparison to another scalar value at lhs of the (==) operator
    # i.e. this magic method is triggered when this column object is at rhs of
    # the (==) operator
    method (==.) ( other ) pass

    # Elementwise comparison to another column object, or vectorized comparison
    # to another scalar value
    method (!=) ( other ) pass
    # Vectorized comparison to another scalar value at lhs of the (!=) operator
    # i.e. this magic method is triggered when this column object is at rhs of
    # the (!=) operator
    method (!=.) ( other ) pass

    # Elementwise comparison to another column object, or vectorized comparison
    # to another scalar value
    method (>=) ( other ) pass
    # Vectorized comparison to another scalar value at lhs of the (>=) operator
    # i.e. this magic method is triggered when this column object is at rhs of
    # the (>=) operator
    method (>=.) ( other ) pass

    # Elementwise comparison to another column object, or vectorized comparison
    # to another scalar value
    method (<=) ( other ) pass
    # Vectorized comparison to another scalar value at lhs of the (<=) operator
    # i.e. this magic method is triggered when this column object is at rhs of
    # the (<=) operator
    method (<=.) ( other ) pass

    # Elementwise comparison to another column object, or vectorized comparison
    # to another scalar value
    method (<) ( other ) pass
    # Vectorized comparison to another scalar value at lhs of the (<) operator
    # i.e. this magic method is triggered when this column object is at rhs of
    # the (<) operator
    method (<.) ( other ) pass

    # Elementwise comparison to another column object, or vectorized comparison
    # to another scalar value
    method (>) ( other ) pass
    # Vectorized comparison to another scalar value at lhs of the (>) operator
    # i.e. this magic method is triggered when this column object is at rhs of
    # the (>) operator
    method (>.) ( other ) pass

    # Elementwise bit AND to another column object, or vectorized bit AND
    # to another scalar value
    method (&&) ( other ) pass
    # Vectorized bit AND to another scalar value at lhs of the (&&) operator
    # i.e. this magic method is triggered when this column object is at rhs of
    # the (&&) operator
    method (&&.) ( other ) pass
    # Elementwise bit AND to another column object, or vectorized bit AND
    # to another scalar value, with this column object updated inplace
    method (&&=) ( other ) pass

    # Elementwise bit OR to another column object, or vectorized bit OR
    # to another scalar value
    method (||) ( other ) pass
    # Vectorized bit OR to another scalar value at lhs of the (||) operator
    # i.e. this magic method is triggered when this column object is at rhs of
    # the (||) operator
    method (||.) ( other ) pass
    # Elementwise bit OR to another column object, or vectorized bit OR
    # to another scalar value, with this column object updated inplace
    method (||=) ( other ) pass

    # Elementwise ADD to another column object, or vectorized ADD
    # to another scalar value
    method (+) ( other ) pass
    # Vectorized ADD to another scalar value at lhs of the (+) operator
    # i.e. this magic method is triggered when this column object is at rhs of
    # the (+) operator
    method (+.) ( other ) pass
    # Elementwise ADD to another column object, or vectorized ADD
    # to another scalar value, with this column object updated inplace
    method (+=) ( other ) pass

    # Elementwise SUBTRACT to another column object, or vectorized SUBTRACT
    # to another scalar value
    method (-) ( other ) pass
    # Vectorized SUBTRACT to another scalar value at lhs of the (-) operator
    # i.e. this magic method is triggered when this column object is at rhs of
    # the (-) operator
    method (-.) ( other ) pass
    # Elementwise SUBTRACT to another column object, or vectorized SUBTRACT
    # to another scalar value, with this column object updated inplace
    method (-=) ( other ) pass

    # Elementwise MULTIPLICATION to another column object, or vectorized
    # MULTIPLICATION to another scalar value
    method (*) ( other ) pass
    # Vectorized MULTIPLICATION to another scalar value at lhs of the (*)
    # operator i.e. this magic method is triggered when this column object is
    # at rhs of the (*) operator
    method (*.) ( other ) pass
    # Elementwise MULTIPLICATION to another column object, or vectorized
    # MULTIPLICATION to another scalar value, with this column object updated
    # inplace
    method (*=) ( other ) pass

    # Elementwise DIVISION to another column object, or vectorized
    # DIVISION to another scalar value
    method (/) ( other ) pass
    # Vectorized DIVISION to another scalar value at lhs of the (/)
    # operator i.e. this magic method is triggered when this column object is
    # at rhs of the (/) operator
    method (/.) ( other ) pass
    # Elementwise DIVISION to another column object, or vectorized
    # DIVISION to another scalar value, with this column object updated
    # inplace
    method (/=) ( other ) pass

    # Elementwise INT-DIVISION to another column object, or vectorized
    # INT-DIVISION to another scalar value
    method (//) ( other ) pass
    # Vectorized INT-DIVISION to another scalar value at lhs of the (//)
    # operator i.e. this magic method is triggered when this column object is
    # at rhs of the (//) operator
    method (//.) ( other ) pass
    # Elementwise INT-DIVISION to another column object, or vectorized
    # INT-DIVISION to another scalar value, with this column object updated
    # inplace
    method (//=) ( other ) pass

    # Elementwise POWER-RAISE to another column object, or vectorized
    # POWER-RAISE to another scalar value
    method (**) ( other ) pass
    # Vectorized POWER-RAISE to another scalar value at lhs of the (**)
    # operator i.e. this magic method is triggered when this column object is
    # at rhs of the (**) operator
    method (**.) ( other ) pass
    # Elementwise POWER-RAISE to another column object, or vectorized
    # POWER-RAISE to another scalar value, with this column object updated
    # inplace
    method (**=) ( other ) pass


    {##
     # Obtain the dtype (in string form being the data type identifier) of
     # this column object, readonly
     #}
    property$ method dtype() pass

  }


  {##
   # Table follows the idea of DataFrame as in R and Python Pandas
   #
   # A table object groups multiple column objects together, with their
   # capacity and valid data length grown/shrunk in a lockstep fashion
   #}
  class Table {

    {##
     # Construct a new Table object with specified capacity
     #
     # The valid data length defaults to the capacity if not specified
     #
     # The data type defaults to float64 if not specified
     #}
    method __init__(
      capacity: 'Decimal',
      row'count: 'Decimal' = capacity,
      **columns: (column'id: Column),
    ) pass

    # Respond to `cap()` by returning capacity of this table object
    method __cap__() pass
    # Respond to `grow()` by growing capacity of this table object
    method __grow__() pass
    # Respond to `len()` by returning valid data length of this table object
    method __len__() pass
    # Respond to `mark()` by updating valid data length of this table object
    method __mark__() pass

    # Respond to indexing against this table object
    method ([]) ( ix ) pass
    # Respond to indexed assignment to this table object
    method ([=]) ( ix, data_ ) pass

    # Respond to attribute extraction against this table object
    #
    # Columns in this table are available via their associated ids as the key
    method (@) ( key ) pass
    # Respond to attribute assignment/deletion to/from this table object
    #
    # A column object or dtype object can be specified as the value, for a
    # dtype object, a new zero-initialized column object will be allocated and
    # put into this table object
    method (@=) ( key, val ) pass

    # Respond to `repr()` by returning the string representation of this
    # table object
    method __repr__() pass

    # Responding to `show()` by returning a string with the summary of this
    # table object
    method __show__() pass

    # Responding to `desc()` by returning a string with the descriptive
    # statistics of this table object
    method __desc__() pass

  }


  DimSpec :=: 'Decimal' | dimName := 'Decimal'
  Shape :=: ( *_: +DimSpec, )


  {##
   # Disk backed Array
   #}
  class DbArray {

    {##
     # Construct a new array backed by the specified data file on disk
     #
     # `dataPath` is relative to `dataDir`
     #
     # The data type defaults to float64 if not specified
     #
     # If not specified, the shape defaults to a value calculated from the
     # actual file length, together with itemsize from the dtype
     #}
    method __init__(
      dataDir: 'String',
      dataPath: 'String',
      dtype: dtype as _ = float64,
      shape: Shape as _ = asFileSize!None,
      *** # allow/ignore arbitrary ctor args for descendant classes
    ) pass

    # Respond to `len()` by returning valid data length of this dba object
    method __len__() pass
    # Respond to `mark()` by updating valid data length of this dba object
    method __mark__() pass

    # Respond to indexing against this dba object
    method ([]) ( ix ) pass
    # Respond to indexed assignment to this dba object
    method ([=]) ( ix, data_ ) pass

    # Respond to `repr()` by returning the string representation of this
    # dba object
    method __repr__() pass
    # Responding to `show()` by returning a string with the summary of this
    # dba object
    method __show__() pass

    {##
     # View this dba as a `Column` object
     #
     # Data read/write are mmap'ed to the backing data file
     #}
    method asColumn() : Column pass

    {##
     # Directory containing the data file backing this dba
     #}
    property$ method dir() pass

    {##
     # Relative file name (within the `dir`) of the data file backing this dba
     #}
    property$ method path() pass

    {##
     # Data type identifier of this dba
     #}
    property$ method dtype() pass

    {##
     # Flat size of all dimensions
     #}
    property$ method size() pass

    {##
     # Shape (i.e. dimensions) of this dba
     #}
    property$ method shape() pass

    {##
     # Valid data length of the 1st dimension
     #}
    property$ method len1d() pass

  }

}

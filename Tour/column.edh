# %%
hd = { import * 'dim' }

# %%
c = arange(3)
c' = c.copy()

# %%
r = random( 3, 3..5 )

# %%
show$ default'filled = empty(5)
# %%
show$ zero'filled = zeros(5)
# %%
show$ one'filled = ones(5)


# %%
class MyColumn { extends Column
  method __init__( name as this.name, ***_ ) pass
  method __repr__( **kwargs ) {
    '# ' ++ this.name ++ ' #\n'
    ++ super.__repr__( **kwargs )
  }
  method __show__( **kwargs ) {
    '# ' ++ this.name ++ ' #\n'
    ++ super.__show__( **kwargs )
  }
  method __desc__( **kwargs ) {
    '# ' ++ this.name ++ ' #\n'
    ++ super.__desc__( **kwargs )
  }
}


# %% issue a dir command to see what's in scope
# note a command will only get interpreted when it's the final value of a piece
# of code submitted to the repl, it has no effect when being in middle
dir

# Column objects are 1-d arrays per se

# %%
c = MyColumn( name= 'My Demo Column',
  capacity= 10, dtype= f8,
  length= 5,
)
c|show

# %%
# note we have no implicit dtype convertion
c[] = arange( len( c ) ) * 3 # this'll fail

# %%
# make sure to specify desired dtype on creation of a column
i = arange( 3 : 3+len( c ), dtype=f8 )
i|show

# %%
c[] = i * 3 # this'll work
c|show

# various display methods supported for column object

# %% # repr, following forms are all equivalent
repr( c )
c|repr
repr$c
c

# %% # show is more verbose than repr, following forms are all equivalent
show( c )
show$c
c|show

# %% # statistical description, following forms are all equivalent
desc( c )
desc$c
c|desc


# %% capacity can be grown
grow( c, 20 )
c|show

# %% valid length can be marked
mark( c, 15 )
c|show

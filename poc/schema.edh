

export class DataSchema {

  # requires an effective `DataBack` instance for each instance of this lib
  __init__:: ( db::DataBack ) -> this
  method __init__ ( db as this.db ) {

    # TODO create global indices

  }


  # atomic storage data types, valued as expr in host language (Haskell)
  InstrumentId := expr Text
  TradeTime := expr Int64
  TradeMinutes := expr Int32
  Price := expr Double


  # the TradePeriod table, per instrument
  export class TradePeriod {

    effect db = db

    # declare as table of specified columns
    extends SuperTable( expr (
        begin :: TradeTime,
        duration :: TradeMinutes,
    ) )

    __init__:: (
      instruId:: InstrumentId, # which instrument this is for
    ) -> this
    method __init__(
      instruId as this.instruId,
    ) extends db.superBack()


    # invoked on initial creation of this persistent business object, or
    # during history replay from backing storage.
    method __db_init__() {

      # TODO create kin indices

    }

  }


}
